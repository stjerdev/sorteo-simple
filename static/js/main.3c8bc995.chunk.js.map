{"version":3,"sources":["components/Tabla.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["tableIcons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","Tabla","icons","localization","header","actions","body","emptyDataSourceMessage","addTooltip","deleteTooltip","editTooltip","filterRow","filterTooltip","filterPlaceHolder","editRow","cancelTooltip","deleteText","saveTooltip","pagination","labelDisplayedRows","labelRowsSelect","labelRowsPerPage","firstAriaLabel","firstTooltip","previousAriaLabel","previousTooltip","nextAriaLabel","nextTooltip","lastAriaLabel","lastTooltip","toolbar","searchTooltip","searchPlaceholder","exportAriaLabel","exportCSVName","exportPDFName","exportTitle","App","useState","columnas","setColumnas","data","setData","cantidadASortear","setCantidadASortear","sorteoRealizado","setSorteoRealizado","seleccionados","setSeleccionados","buttonRef","createRef","handleOpenDialog","e","current","open","handleRemoveFile","removeFile","style","maxWidth","onFileLoad","Object","keys","map","c","title","field","d","onError","err","console","log","noClick","noDrag","config","onRemoveFile","file","display","flexDirection","marginBottom","Button","type","color","variant","onClick","borderWidth","borderStyle","borderColor","height","lineHeight","marginTop","paddingLeft","paddingTop","width","name","columns","Paper","margin","Grid","container","alignItems","TextField","id","label","value","onChange","target","InputLabelProps","shrink","size","ordenados","assign","rnd","Math","random","sort","a","b","seleccionadosArr","i","push","Fade","in","transitionDelay","options","exportAllData","exportButton","paging","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3c8bc995.chunk.js","sourcesContent":["import AddBox from \"@material-ui/icons/AddBox\"\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\"\nimport Check from \"@material-ui/icons/Check\"\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\"\nimport ChevronRight from \"@material-ui/icons/ChevronRight\"\nimport Clear from \"@material-ui/icons/Clear\"\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\"\nimport Edit from \"@material-ui/icons/Edit\"\nimport FilterList from \"@material-ui/icons/FilterList\"\nimport FirstPage from \"@material-ui/icons/FirstPage\"\nimport LastPage from \"@material-ui/icons/LastPage\"\nimport Remove from \"@material-ui/icons/Remove\"\nimport SaveAlt from \"@material-ui/icons/SaveAlt\"\nimport Search from \"@material-ui/icons/Search\"\nimport ViewColumn from \"@material-ui/icons/ViewColumn\"\nimport MaterialTable, { MaterialTableProps } from \"material-table\"\nimport React, { forwardRef } from \"react\"\n\nconst tableIcons = {\n  Add: forwardRef<any>((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef<any>((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef<any>((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef<any>((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef<any>((props, ref) => <ChevronRight {...props} ref={ref} />),\n  Edit: forwardRef<any>((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef<any>((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef<any>((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef<any>((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef<any>((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef<any>((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef<any>((props, ref) => <ChevronLeft {...props} ref={ref} />),\n  ResetSearch: forwardRef<any>((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef<any>((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef<any>((props, ref) => <ArrowDownward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef<any>((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef<any>((props, ref) => <ViewColumn {...props} ref={ref} />),\n}\n\nfunction Tabla<T extends object>(props: MaterialTableProps<T>) {\n  return (\n    <MaterialTable\n      icons={tableIcons}\n      localization={{\n        header: {\n          actions: \"\",\n        },\n        body: {\n          emptyDataSourceMessage: \"Sin datos\",\n          addTooltip: \"Agregar\",\n          deleteTooltip: \"Suprimir\",\n          editTooltip: \"Editar\",\n          filterRow: {\n            filterTooltip: \"Filtrar\",\n            filterPlaceHolder: \"filtrar ...\",\n          },\n          editRow: {\n            cancelTooltip: \"Cancelar\",\n            deleteText: \"¿Está seguro que quieres eliminar esta fila?\",\n            saveTooltip: \"Guardar\",\n          },\n        },\n        pagination: {\n          labelDisplayedRows: \"{from}-{to} de {count}\",\n          labelRowsSelect: \"filas\",\n          labelRowsPerPage: \"filas por pag.\",\n          firstAriaLabel: \"Primera pag.\",\n          firstTooltip: \"Primera pag.\",\n          previousAriaLabel: \"Pag. anterior\",\n          previousTooltip: \"Pag. anterior\",\n          nextAriaLabel: \"siguiente\",\n          nextTooltip: \"Pag. siguiente\",\n          lastAriaLabel: \"Última pag.\",\n          lastTooltip: \"Última pag.\",\n        },\n        toolbar: {\n          searchTooltip: \"Buscar\",\n          searchPlaceholder: \"buscar ...\",\n          exportAriaLabel: \"Exportar\",\n          exportCSVName: \"Exportar CSV\",\n          exportPDFName: \"Exportar PDF\",\n          exportTitle: \"Exportar\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport default Tabla\n","import { Button, Fade, Grid, Paper, TextField } from \"@material-ui/core\"\nimport React, { createRef, useState } from \"react\"\nimport { CSVReader } from \"react-papaparse\"\nimport Tabla from \"./components/Tabla\"\n\nconst App = () => {\n  const [columnas, setColumnas] = useState<{ title: string; field: string }[]>([])\n  const [data, setData] = useState<any[]>([])\n  const [cantidadASortear, setCantidadASortear] = useState<number>(1)\n  const [sorteoRealizado, setSorteoRealizado] = useState(false)\n  const [seleccionados, setSeleccionados] = useState<any[]>([])\n  const buttonRef = createRef<CSVReader>()\n\n  const handleOpenDialog = (e: any) => {\n    if (buttonRef.current) {\n      buttonRef.current.open(e)\n    }\n  }\n\n  const handleOnFileLoad = (data: any[]) => {\n    setColumnas(Object.keys(data[0].data).map((c) => ({ title: c, field: c })))\n    setData(data.map((d) => d.data))\n  }\n\n  const handleOnError = (err: Error) => {\n    console.log(err)\n  }\n\n  const handleOnRemoveFile = () => {\n    setSorteoRealizado(false)\n    setSeleccionados([])\n  }\n\n  const sortear = () => {\n    let dataRandom = data.map((d) => Object.assign({}, d, { rnd: Math.random() }))\n    let ordenados = dataRandom.sort((a, b) => (a.rnd > b.rnd ? 1 : -1))\n    let seleccionadosArr: any[] = []\n    for (let i = 0; i < cantidadASortear; i++) {\n      seleccionadosArr.push(ordenados[i])\n    }\n    setSorteoRealizado(true)\n    setSeleccionados(seleccionadosArr)\n  }\n\n  const handleRemoveFile = () => {\n    if (buttonRef.current) {\n      setColumnas([])\n      setData([])\n      buttonRef.current.removeFile()\n    }\n  }\n  return (\n    <div style={{ maxWidth: \"100%\" }}>\n      {!sorteoRealizado && (\n        <>\n          <CSVReader\n            ref={buttonRef}\n            onFileLoad={handleOnFileLoad}\n            onError={handleOnError}\n            noClick\n            noDrag\n            config={{\n              header: true,\n            }}\n            onRemoveFile={handleOnRemoveFile}\n          >\n            {({ file }: any) => (\n              <aside\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"row\",\n                  marginBottom: 10,\n                }}\n              >\n                <Button\n                  type=\"button\"\n                  color=\"primary\"\n                  variant=\"contained\"\n                  onClick={handleOpenDialog}\n                >\n                  Seleccionar archivo\n                </Button>\n                <div\n                  style={{\n                    borderWidth: 1,\n                    borderStyle: \"solid\",\n                    borderColor: \"#ccc\",\n                    height: 45,\n                    lineHeight: 2.5,\n                    marginTop: 5,\n                    marginBottom: 5,\n                    paddingLeft: 13,\n                    paddingTop: 3,\n                    width: \"60%\",\n                  }}\n                >\n                  {file && file.name}\n                </div>\n                <Button variant=\"contained\" color=\"secondary\" onClick={handleRemoveFile}>\n                  Quitar\n                </Button>\n              </aside>\n            )}\n          </CSVReader>\n          <Tabla columns={columnas} data={data} title=\"Lista a sortear\" />\n          <Paper style={{ paddingLeft: \"200px\", margin: \"20px\" }}>\n            <Grid container style={{ display: \"flex\", alignItems: \"center\" }}>\n              <TextField\n                id=\"cantidad-sorteo\"\n                label=\"cantidad\"\n                type=\"number\"\n                value={cantidadASortear}\n                onChange={(e: any) => setCantidadASortear(+e.target.value)}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n              />\n              <Button variant=\"contained\" color=\"primary\" size=\"small\" onClick={sortear}>\n                sortear\n              </Button>\n            </Grid>\n          </Paper>\n        </>\n      )}\n      {sorteoRealizado && (\n        <Fade in={sorteoRealizado} style={{ transitionDelay: \"500ms\" }}>\n          <Tabla\n            columns={columnas}\n            data={seleccionados}\n            title=\"Seleccionados por Sorteo\"\n            options={{\n              exportAllData: true,\n              exportButton: true,\n              paging: false,\n            }}\n          />\n        </Fade>\n      )}\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}